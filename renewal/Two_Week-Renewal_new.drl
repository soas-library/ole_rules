package org.kuali.ole.deliver.checkout

import org.kuali.ole.OLEConstants
import org.kuali.ole.deliver.bo.OleLoanDocument
import org.kuali.ole.deliver.bo.OlePatronDocument
import org.kuali.ole.deliver.util.OleItemRecordForCirc
import org.kuali.ole.deliver.drools.DroolsConstants
import org.kuali.ole.deliver.util.DroolsResponse
import org.kuali.ole.deliver.util.NoticeInfo

rule "TwoWeekLoanRenewalNew"
agenda-group "renewal validation"
activation-group "renewal validation"
when

$l: OleLoanDocument(Integer.valueOf(getNumberOfRenewals()) < 3000)
$n: NoticeInfo()
$d : DroolsResponse()
$p: OlePatronDocument(getBorrowerTypeCode() in ("STU"))
$i: OleItemRecordForCirc (getItemType() in ("LONG"), $z: getOleDeliverRequestBo(), null == $z)

then
 $d.setRuleMatched(true);
 $l.setCirculationPolicyId("TwoWeekLoanRenewalNew");
 $l.loanPeriod("14-D","14-D");
 $n.setNoticeType(DroolsConstants.REGULAR_LOANS_NOTICE_CONFIG);
 end

rule "2TwoWeekLoanRenewalNew1"
agenda-group "renewal validation"
activation-group "renewal validation"
when

$l: OleLoanDocument(Integer.valueOf(getNumberOfRenewals()) >= 3000)
$n: NoticeInfo()
$d : DroolsResponse()
$p: OlePatronDocument(getBorrowerTypeCode() in ("STU"))
$i: OleItemRecordForCirc (getItemType() in ("LONG"))

then
 $d.setRuleMatched(true);
 $l.setCirculationPolicyId("2TwoWeekLoanRenewalNew1");
 $d.addErrorMessage("Patron has more than allowed limit of renewals");
 $d.addOverridePermissions(DroolsConstants.GENERAL_BLOCK_PERMISSION);
 $d.addErrorMessageCode("ErrorMessageFromRule");
 $l.loanPeriod("14-D","14-D");
 $n.setNoticeType(DroolsConstants.REGULAR_LOANS_NOTICE_CONFIG);
 end
